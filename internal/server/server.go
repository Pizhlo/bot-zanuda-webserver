package server

import (
	"context"
	"strings"

	_ "webserver/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

type server struct {
	addr string
	e    *echo.Echo

	api struct {
		h0 handler
	}
}

func New(cfg *Config) *server {
	return &server{addr: cfg.Address, api: struct{ h0 handler }{h0: cfg.HandlerV0}}
}

type handler interface {
	noteHandler
	middlewareHandler
	healthHandler
}

type noteHandler interface {
	CreateNote(c echo.Context) error
	NotesBySpaceID(c echo.Context) error
	UpdateNote(c echo.Context) error
	GetNoteTypes(c echo.Context) error
	GetNotesByType(c echo.Context) error
	SearchNoteByText(c echo.Context) error
	DeleteNote(c echo.Context) error
}

type healthHandler interface {
	Health(c echo.Context) error
}

type middlewareHandler interface {
	ValidateNoteRequest(next echo.HandlerFunc) echo.HandlerFunc
}

func (s *server) Serve() error {
	e := echo.New()

	skipper := func(c echo.Context) bool {
		return strings.Contains(c.Request().URL.Path, "swagger")
	}

	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Skipper: skipper,
	}))

	e.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{Skipper: skipper}))

	e.GET("/swagger/*", echoSwagger.WrapHandler)

	api := e.Group("api/")

	apiv0 := api.Group("v0/")

	apiv0.GET("/health", s.api.h0.Health)

	spaces := apiv0.Group("spaces")

	// notes
	spaces.GET("/:id/notes", s.api.h0.NotesBySpaceID)

	// создание, обновление, удаление
	spaces.POST("/notes/create", s.api.h0.CreateNote, s.api.h0.ValidateNoteRequest)
	spaces.PATCH("/notes/update", s.api.h0.UpdateNote, s.api.h0.ValidateNoteRequest)
	spaces.DELETE("/:space_id/notes/:note_id/delete", s.api.h0.DeleteNote)

	// типы заметок
	spaces.GET("/:id/notes/types", s.api.h0.GetNoteTypes)   // получить, какие есть типы заметок
	spaces.GET("/:id/notes/:type", s.api.h0.GetNotesByType) // получить все заметки одного типа

	// поиск
	spaces.POST("/notes/search/text", s.api.h0.SearchNoteByText) // по тексту

	s.e = e

	return e.Start(s.addr)
}

func (s *server) Shutdown(ctx context.Context) error {
	return s.e.Shutdown(ctx)
}
