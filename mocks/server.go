// Code generated by MockGen. DO NOT EDIT.
// Source: ./server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// Mockhandler is a mock of handler interface.
type Mockhandler struct {
	ctrl     *gomock.Controller
	recorder *MockhandlerMockRecorder
}

// MockhandlerMockRecorder is the mock recorder for Mockhandler.
type MockhandlerMockRecorder struct {
	mock *Mockhandler
}

// NewMockhandler creates a new mock instance.
func NewMockhandler(ctrl *gomock.Controller) *Mockhandler {
	mock := &Mockhandler{ctrl: ctrl}
	mock.recorder = &MockhandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhandler) EXPECT() *MockhandlerMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *Mockhandler) CreateNote(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockhandlerMockRecorder) CreateNote(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*Mockhandler)(nil).CreateNote), c)
}

// CreateSpace mocks base method.
func (m *Mockhandler) CreateSpace(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpace indicates an expected call of CreateSpace.
func (mr *MockhandlerMockRecorder) CreateSpace(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*Mockhandler)(nil).CreateSpace), c)
}

// DeleteAllNotes mocks base method.
func (m *Mockhandler) DeleteAllNotes(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotes", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllNotes indicates an expected call of DeleteAllNotes.
func (mr *MockhandlerMockRecorder) DeleteAllNotes(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotes", reflect.TypeOf((*Mockhandler)(nil).DeleteAllNotes), c)
}

// DeleteNote mocks base method.
func (m *Mockhandler) DeleteNote(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockhandlerMockRecorder) DeleteNote(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*Mockhandler)(nil).DeleteNote), c)
}

// GetNoteTypes mocks base method.
func (m *Mockhandler) GetNoteTypes(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteTypes", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNoteTypes indicates an expected call of GetNoteTypes.
func (mr *MockhandlerMockRecorder) GetNoteTypes(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteTypes", reflect.TypeOf((*Mockhandler)(nil).GetNoteTypes), c)
}

// GetNotesByType mocks base method.
func (m *Mockhandler) GetNotesByType(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByType", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNotesByType indicates an expected call of GetNotesByType.
func (mr *MockhandlerMockRecorder) GetNotesByType(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByType", reflect.TypeOf((*Mockhandler)(nil).GetNotesByType), c)
}

// Health mocks base method.
func (m *Mockhandler) Health(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockhandlerMockRecorder) Health(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*Mockhandler)(nil).Health), c)
}

// NotesBySpaceID mocks base method.
func (m *Mockhandler) NotesBySpaceID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotesBySpaceID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotesBySpaceID indicates an expected call of NotesBySpaceID.
func (mr *MockhandlerMockRecorder) NotesBySpaceID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotesBySpaceID", reflect.TypeOf((*Mockhandler)(nil).NotesBySpaceID), c)
}

// SearchNoteByText mocks base method.
func (m *Mockhandler) SearchNoteByText(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNoteByText", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchNoteByText indicates an expected call of SearchNoteByText.
func (mr *MockhandlerMockRecorder) SearchNoteByText(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNoteByText", reflect.TypeOf((*Mockhandler)(nil).SearchNoteByText), c)
}

// UpdateNote mocks base method.
func (m *Mockhandler) UpdateNote(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockhandlerMockRecorder) UpdateNote(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*Mockhandler)(nil).UpdateNote), c)
}

// ValidateNoteRequest mocks base method.
func (m *Mockhandler) ValidateNoteRequest(next echo.HandlerFunc) echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNoteRequest", next)
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// ValidateNoteRequest indicates an expected call of ValidateNoteRequest.
func (mr *MockhandlerMockRecorder) ValidateNoteRequest(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNoteRequest", reflect.TypeOf((*Mockhandler)(nil).ValidateNoteRequest), next)
}

// MockspaceHandler is a mock of spaceHandler interface.
type MockspaceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockspaceHandlerMockRecorder
}

// MockspaceHandlerMockRecorder is the mock recorder for MockspaceHandler.
type MockspaceHandlerMockRecorder struct {
	mock *MockspaceHandler
}

// NewMockspaceHandler creates a new mock instance.
func NewMockspaceHandler(ctrl *gomock.Controller) *MockspaceHandler {
	mock := &MockspaceHandler{ctrl: ctrl}
	mock.recorder = &MockspaceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspaceHandler) EXPECT() *MockspaceHandlerMockRecorder {
	return m.recorder
}

// CreateSpace mocks base method.
func (m *MockspaceHandler) CreateSpace(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpace indicates an expected call of CreateSpace.
func (mr *MockspaceHandlerMockRecorder) CreateSpace(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*MockspaceHandler)(nil).CreateSpace), c)
}

// MocknoteHandler is a mock of noteHandler interface.
type MocknoteHandler struct {
	ctrl     *gomock.Controller
	recorder *MocknoteHandlerMockRecorder
}

// MocknoteHandlerMockRecorder is the mock recorder for MocknoteHandler.
type MocknoteHandlerMockRecorder struct {
	mock *MocknoteHandler
}

// NewMocknoteHandler creates a new mock instance.
func NewMocknoteHandler(ctrl *gomock.Controller) *MocknoteHandler {
	mock := &MocknoteHandler{ctrl: ctrl}
	mock.recorder = &MocknoteHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknoteHandler) EXPECT() *MocknoteHandlerMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MocknoteHandler) CreateNote(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MocknoteHandlerMockRecorder) CreateNote(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MocknoteHandler)(nil).CreateNote), c)
}

// DeleteAllNotes mocks base method.
func (m *MocknoteHandler) DeleteAllNotes(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotes", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllNotes indicates an expected call of DeleteAllNotes.
func (mr *MocknoteHandlerMockRecorder) DeleteAllNotes(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotes", reflect.TypeOf((*MocknoteHandler)(nil).DeleteAllNotes), c)
}

// DeleteNote mocks base method.
func (m *MocknoteHandler) DeleteNote(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MocknoteHandlerMockRecorder) DeleteNote(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MocknoteHandler)(nil).DeleteNote), c)
}

// GetNoteTypes mocks base method.
func (m *MocknoteHandler) GetNoteTypes(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteTypes", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNoteTypes indicates an expected call of GetNoteTypes.
func (mr *MocknoteHandlerMockRecorder) GetNoteTypes(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteTypes", reflect.TypeOf((*MocknoteHandler)(nil).GetNoteTypes), c)
}

// GetNotesByType mocks base method.
func (m *MocknoteHandler) GetNotesByType(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByType", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNotesByType indicates an expected call of GetNotesByType.
func (mr *MocknoteHandlerMockRecorder) GetNotesByType(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByType", reflect.TypeOf((*MocknoteHandler)(nil).GetNotesByType), c)
}

// NotesBySpaceID mocks base method.
func (m *MocknoteHandler) NotesBySpaceID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotesBySpaceID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotesBySpaceID indicates an expected call of NotesBySpaceID.
func (mr *MocknoteHandlerMockRecorder) NotesBySpaceID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotesBySpaceID", reflect.TypeOf((*MocknoteHandler)(nil).NotesBySpaceID), c)
}

// SearchNoteByText mocks base method.
func (m *MocknoteHandler) SearchNoteByText(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNoteByText", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchNoteByText indicates an expected call of SearchNoteByText.
func (mr *MocknoteHandlerMockRecorder) SearchNoteByText(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNoteByText", reflect.TypeOf((*MocknoteHandler)(nil).SearchNoteByText), c)
}

// UpdateNote mocks base method.
func (m *MocknoteHandler) UpdateNote(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MocknoteHandlerMockRecorder) UpdateNote(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MocknoteHandler)(nil).UpdateNote), c)
}

// MockhealthHandler is a mock of healthHandler interface.
type MockhealthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockhealthHandlerMockRecorder
}

// MockhealthHandlerMockRecorder is the mock recorder for MockhealthHandler.
type MockhealthHandlerMockRecorder struct {
	mock *MockhealthHandler
}

// NewMockhealthHandler creates a new mock instance.
func NewMockhealthHandler(ctrl *gomock.Controller) *MockhealthHandler {
	mock := &MockhealthHandler{ctrl: ctrl}
	mock.recorder = &MockhealthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhealthHandler) EXPECT() *MockhealthHandlerMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockhealthHandler) Health(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockhealthHandlerMockRecorder) Health(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockhealthHandler)(nil).Health), c)
}

// MockmiddlewareHandler is a mock of middlewareHandler interface.
type MockmiddlewareHandler struct {
	ctrl     *gomock.Controller
	recorder *MockmiddlewareHandlerMockRecorder
}

// MockmiddlewareHandlerMockRecorder is the mock recorder for MockmiddlewareHandler.
type MockmiddlewareHandlerMockRecorder struct {
	mock *MockmiddlewareHandler
}

// NewMockmiddlewareHandler creates a new mock instance.
func NewMockmiddlewareHandler(ctrl *gomock.Controller) *MockmiddlewareHandler {
	mock := &MockmiddlewareHandler{ctrl: ctrl}
	mock.recorder = &MockmiddlewareHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmiddlewareHandler) EXPECT() *MockmiddlewareHandlerMockRecorder {
	return m.recorder
}

// ValidateNoteRequest mocks base method.
func (m *MockmiddlewareHandler) ValidateNoteRequest(next echo.HandlerFunc) echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNoteRequest", next)
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// ValidateNoteRequest indicates an expected call of ValidateNoteRequest.
func (mr *MockmiddlewareHandlerMockRecorder) ValidateNoteRequest(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNoteRequest", reflect.TypeOf((*MockmiddlewareHandler)(nil).ValidateNoteRequest), next)
}
