// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "webserver/internal/model"
	rabbit "webserver/internal/model/rabbit"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockrepo is a mock of repo interface.
type Mockrepo struct {
	ctrl     *gomock.Controller
	recorder *MockrepoMockRecorder
}

// MockrepoMockRecorder is the mock recorder for Mockrepo.
type MockrepoMockRecorder struct {
	mock *Mockrepo
}

// NewMockrepo creates a new mock instance.
func NewMockrepo(ctrl *gomock.Controller) *Mockrepo {
	mock := &Mockrepo{ctrl: ctrl}
	mock.recorder = &MockrepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepo) EXPECT() *MockrepoMockRecorder {
	return m.recorder
}

// CheckParticipant mocks base method.
func (m *Mockrepo) CheckParticipant(ctx context.Context, userID int64, spaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckParticipant", ctx, userID, spaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckParticipant indicates an expected call of CheckParticipant.
func (mr *MockrepoMockRecorder) CheckParticipant(ctx, userID, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckParticipant", reflect.TypeOf((*Mockrepo)(nil).CheckParticipant), ctx, userID, spaceID)
}

// GetAllNotesBySpaceID mocks base method.
func (m *Mockrepo) GetAllNotesBySpaceID(ctx context.Context, spaceID uuid.UUID) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesBySpaceID", ctx, spaceID)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesBySpaceID indicates an expected call of GetAllNotesBySpaceID.
func (mr *MockrepoMockRecorder) GetAllNotesBySpaceID(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesBySpaceID", reflect.TypeOf((*Mockrepo)(nil).GetAllNotesBySpaceID), ctx, spaceID)
}

// GetAllNotesBySpaceIDFull mocks base method.
func (m *Mockrepo) GetAllNotesBySpaceIDFull(ctx context.Context, spaceID uuid.UUID) ([]model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesBySpaceIDFull", ctx, spaceID)
	ret0, _ := ret[0].([]model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesBySpaceIDFull indicates an expected call of GetAllNotesBySpaceIDFull.
func (mr *MockrepoMockRecorder) GetAllNotesBySpaceIDFull(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesBySpaceIDFull", reflect.TypeOf((*Mockrepo)(nil).GetAllNotesBySpaceIDFull), ctx, spaceID)
}

// GetNoteByID mocks base method.
func (m *Mockrepo) GetNoteByID(ctx context.Context, noteID uuid.UUID) (model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", ctx, noteID)
	ret0, _ := ret[0].(model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MockrepoMockRecorder) GetNoteByID(ctx, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*Mockrepo)(nil).GetNoteByID), ctx, noteID)
}

// GetNotesByType mocks base method.
func (m *Mockrepo) GetNotesByType(ctx context.Context, spaceID uuid.UUID, noteType model.NoteType) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByType", ctx, spaceID, noteType)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesByType indicates an expected call of GetNotesByType.
func (mr *MockrepoMockRecorder) GetNotesByType(ctx, spaceID, noteType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByType", reflect.TypeOf((*Mockrepo)(nil).GetNotesByType), ctx, spaceID, noteType)
}

// GetNotesTypes mocks base method.
func (m *Mockrepo) GetNotesTypes(ctx context.Context, spaceID uuid.UUID) ([]model.NoteTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesTypes", ctx, spaceID)
	ret0, _ := ret[0].([]model.NoteTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesTypes indicates an expected call of GetNotesTypes.
func (mr *MockrepoMockRecorder) GetNotesTypes(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesTypes", reflect.TypeOf((*Mockrepo)(nil).GetNotesTypes), ctx, spaceID)
}

// GetSpaceByID mocks base method.
func (m *Mockrepo) GetSpaceByID(ctx context.Context, id uuid.UUID) (model.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByID", ctx, id)
	ret0, _ := ret[0].(model.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByID indicates an expected call of GetSpaceByID.
func (mr *MockrepoMockRecorder) GetSpaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByID", reflect.TypeOf((*Mockrepo)(nil).GetSpaceByID), ctx, id)
}

// SearchNoteByText mocks base method.
func (m *Mockrepo) SearchNoteByText(ctx context.Context, req model.SearchNoteByTextRequest) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNoteByText", ctx, req)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchNoteByText indicates an expected call of SearchNoteByText.
func (mr *MockrepoMockRecorder) SearchNoteByText(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNoteByText", reflect.TypeOf((*Mockrepo)(nil).SearchNoteByText), ctx, req)
}

// MockspaceRepo is a mock of spaceRepo interface.
type MockspaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockspaceRepoMockRecorder
}

// MockspaceRepoMockRecorder is the mock recorder for MockspaceRepo.
type MockspaceRepoMockRecorder struct {
	mock *MockspaceRepo
}

// NewMockspaceRepo creates a new mock instance.
func NewMockspaceRepo(ctrl *gomock.Controller) *MockspaceRepo {
	mock := &MockspaceRepo{ctrl: ctrl}
	mock.recorder = &MockspaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspaceRepo) EXPECT() *MockspaceRepoMockRecorder {
	return m.recorder
}

// CheckParticipant mocks base method.
func (m *MockspaceRepo) CheckParticipant(ctx context.Context, userID int64, spaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckParticipant", ctx, userID, spaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckParticipant indicates an expected call of CheckParticipant.
func (mr *MockspaceRepoMockRecorder) CheckParticipant(ctx, userID, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckParticipant", reflect.TypeOf((*MockspaceRepo)(nil).CheckParticipant), ctx, userID, spaceID)
}

// GetSpaceByID mocks base method.
func (m *MockspaceRepo) GetSpaceByID(ctx context.Context, id uuid.UUID) (model.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByID", ctx, id)
	ret0, _ := ret[0].(model.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByID indicates an expected call of GetSpaceByID.
func (mr *MockspaceRepoMockRecorder) GetSpaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByID", reflect.TypeOf((*MockspaceRepo)(nil).GetSpaceByID), ctx, id)
}

// MocknoteRepo is a mock of noteRepo interface.
type MocknoteRepo struct {
	ctrl     *gomock.Controller
	recorder *MocknoteRepoMockRecorder
}

// MocknoteRepoMockRecorder is the mock recorder for MocknoteRepo.
type MocknoteRepoMockRecorder struct {
	mock *MocknoteRepo
}

// NewMocknoteRepo creates a new mock instance.
func NewMocknoteRepo(ctrl *gomock.Controller) *MocknoteRepo {
	mock := &MocknoteRepo{ctrl: ctrl}
	mock.recorder = &MocknoteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknoteRepo) EXPECT() *MocknoteRepoMockRecorder {
	return m.recorder
}

// GetAllNotesBySpaceID mocks base method.
func (m *MocknoteRepo) GetAllNotesBySpaceID(ctx context.Context, spaceID uuid.UUID) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesBySpaceID", ctx, spaceID)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesBySpaceID indicates an expected call of GetAllNotesBySpaceID.
func (mr *MocknoteRepoMockRecorder) GetAllNotesBySpaceID(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesBySpaceID", reflect.TypeOf((*MocknoteRepo)(nil).GetAllNotesBySpaceID), ctx, spaceID)
}

// GetAllNotesBySpaceIDFull mocks base method.
func (m *MocknoteRepo) GetAllNotesBySpaceIDFull(ctx context.Context, spaceID uuid.UUID) ([]model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesBySpaceIDFull", ctx, spaceID)
	ret0, _ := ret[0].([]model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesBySpaceIDFull indicates an expected call of GetAllNotesBySpaceIDFull.
func (mr *MocknoteRepoMockRecorder) GetAllNotesBySpaceIDFull(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesBySpaceIDFull", reflect.TypeOf((*MocknoteRepo)(nil).GetAllNotesBySpaceIDFull), ctx, spaceID)
}

// GetNoteByID mocks base method.
func (m *MocknoteRepo) GetNoteByID(ctx context.Context, noteID uuid.UUID) (model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", ctx, noteID)
	ret0, _ := ret[0].(model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MocknoteRepoMockRecorder) GetNoteByID(ctx, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*MocknoteRepo)(nil).GetNoteByID), ctx, noteID)
}

// GetNotesByType mocks base method.
func (m *MocknoteRepo) GetNotesByType(ctx context.Context, spaceID uuid.UUID, noteType model.NoteType) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByType", ctx, spaceID, noteType)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesByType indicates an expected call of GetNotesByType.
func (mr *MocknoteRepoMockRecorder) GetNotesByType(ctx, spaceID, noteType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByType", reflect.TypeOf((*MocknoteRepo)(nil).GetNotesByType), ctx, spaceID, noteType)
}

// GetNotesTypes mocks base method.
func (m *MocknoteRepo) GetNotesTypes(ctx context.Context, spaceID uuid.UUID) ([]model.NoteTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesTypes", ctx, spaceID)
	ret0, _ := ret[0].([]model.NoteTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesTypes indicates an expected call of GetNotesTypes.
func (mr *MocknoteRepoMockRecorder) GetNotesTypes(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesTypes", reflect.TypeOf((*MocknoteRepo)(nil).GetNotesTypes), ctx, spaceID)
}

// SearchNoteByText mocks base method.
func (m *MocknoteRepo) SearchNoteByText(ctx context.Context, req model.SearchNoteByTextRequest) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNoteByText", ctx, req)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchNoteByText indicates an expected call of SearchNoteByText.
func (mr *MocknoteRepoMockRecorder) SearchNoteByText(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNoteByText", reflect.TypeOf((*MocknoteRepo)(nil).SearchNoteByText), ctx, req)
}

// MockspaceCache is a mock of spaceCache interface.
type MockspaceCache struct {
	ctrl     *gomock.Controller
	recorder *MockspaceCacheMockRecorder
}

// MockspaceCacheMockRecorder is the mock recorder for MockspaceCache.
type MockspaceCacheMockRecorder struct {
	mock *MockspaceCache
}

// NewMockspaceCache creates a new mock instance.
func NewMockspaceCache(ctrl *gomock.Controller) *MockspaceCache {
	mock := &MockspaceCache{ctrl: ctrl}
	mock.recorder = &MockspaceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspaceCache) EXPECT() *MockspaceCacheMockRecorder {
	return m.recorder
}

// GetSpaceByID mocks base method.
func (m *MockspaceCache) GetSpaceByID(ctx context.Context, id uuid.UUID) (model.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByID", ctx, id)
	ret0, _ := ret[0].(model.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByID indicates an expected call of GetSpaceByID.
func (mr *MockspaceCacheMockRecorder) GetSpaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByID", reflect.TypeOf((*MockspaceCache)(nil).GetSpaceByID), ctx, id)
}

// MockdbWorker is a mock of dbWorker interface.
type MockdbWorker struct {
	ctrl     *gomock.Controller
	recorder *MockdbWorkerMockRecorder
}

// MockdbWorkerMockRecorder is the mock recorder for MockdbWorker.
type MockdbWorkerMockRecorder struct {
	mock *MockdbWorker
}

// NewMockdbWorker creates a new mock instance.
func NewMockdbWorker(ctrl *gomock.Controller) *MockdbWorker {
	mock := &MockdbWorker{ctrl: ctrl}
	mock.recorder = &MockdbWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbWorker) EXPECT() *MockdbWorkerMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockdbWorker) CreateNote(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockdbWorkerMockRecorder) CreateNote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockdbWorker)(nil).CreateNote), ctx, req)
}

// CreateSpace mocks base method.
func (m *MockdbWorker) CreateSpace(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpace indicates an expected call of CreateSpace.
func (mr *MockdbWorkerMockRecorder) CreateSpace(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*MockdbWorker)(nil).CreateSpace), ctx, req)
}

// DeleteAllNotes mocks base method.
func (m *MockdbWorker) DeleteAllNotes(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotes", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllNotes indicates an expected call of DeleteAllNotes.
func (mr *MockdbWorkerMockRecorder) DeleteAllNotes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotes", reflect.TypeOf((*MockdbWorker)(nil).DeleteAllNotes), ctx, req)
}

// DeleteNote mocks base method.
func (m *MockdbWorker) DeleteNote(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockdbWorkerMockRecorder) DeleteNote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockdbWorker)(nil).DeleteNote), ctx, req)
}

// UpdateNote mocks base method.
func (m *MockdbWorker) UpdateNote(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockdbWorkerMockRecorder) UpdateNote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockdbWorker)(nil).UpdateNote), ctx, req)
}

// MockspaceEditor is a mock of spaceEditor interface.
type MockspaceEditor struct {
	ctrl     *gomock.Controller
	recorder *MockspaceEditorMockRecorder
}

// MockspaceEditorMockRecorder is the mock recorder for MockspaceEditor.
type MockspaceEditorMockRecorder struct {
	mock *MockspaceEditor
}

// NewMockspaceEditor creates a new mock instance.
func NewMockspaceEditor(ctrl *gomock.Controller) *MockspaceEditor {
	mock := &MockspaceEditor{ctrl: ctrl}
	mock.recorder = &MockspaceEditorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspaceEditor) EXPECT() *MockspaceEditorMockRecorder {
	return m.recorder
}

// CreateSpace mocks base method.
func (m *MockspaceEditor) CreateSpace(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpace indicates an expected call of CreateSpace.
func (mr *MockspaceEditorMockRecorder) CreateSpace(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*MockspaceEditor)(nil).CreateSpace), ctx, req)
}

// MocknoteEditor is a mock of noteEditor interface.
type MocknoteEditor struct {
	ctrl     *gomock.Controller
	recorder *MocknoteEditorMockRecorder
}

// MocknoteEditorMockRecorder is the mock recorder for MocknoteEditor.
type MocknoteEditorMockRecorder struct {
	mock *MocknoteEditor
}

// NewMocknoteEditor creates a new mock instance.
func NewMocknoteEditor(ctrl *gomock.Controller) *MocknoteEditor {
	mock := &MocknoteEditor{ctrl: ctrl}
	mock.recorder = &MocknoteEditorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknoteEditor) EXPECT() *MocknoteEditorMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MocknoteEditor) CreateNote(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MocknoteEditorMockRecorder) CreateNote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MocknoteEditor)(nil).CreateNote), ctx, req)
}

// DeleteAllNotes mocks base method.
func (m *MocknoteEditor) DeleteAllNotes(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotes", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllNotes indicates an expected call of DeleteAllNotes.
func (mr *MocknoteEditorMockRecorder) DeleteAllNotes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotes", reflect.TypeOf((*MocknoteEditor)(nil).DeleteAllNotes), ctx, req)
}

// DeleteNote mocks base method.
func (m *MocknoteEditor) DeleteNote(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MocknoteEditorMockRecorder) DeleteNote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MocknoteEditor)(nil).DeleteNote), ctx, req)
}

// UpdateNote mocks base method.
func (m *MocknoteEditor) UpdateNote(ctx context.Context, req rabbit.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MocknoteEditorMockRecorder) UpdateNote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MocknoteEditor)(nil).UpdateNote), ctx, req)
}
