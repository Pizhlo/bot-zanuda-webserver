// Code generated by MockGen. DO NOT EDIT.
// Source: ./worker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp091 "github.com/rabbitmq/amqp091-go"
)

// Mockchannel is a mock of channel interface.
type Mockchannel struct {
	ctrl     *gomock.Controller
	recorder *MockchannelMockRecorder
}

// MockchannelMockRecorder is the mock recorder for Mockchannel.
type MockchannelMockRecorder struct {
	mock *Mockchannel
}

// NewMockchannel creates a new mock instance.
func NewMockchannel(ctrl *gomock.Controller) *Mockchannel {
	mock := &Mockchannel{ctrl: ctrl}
	mock.recorder = &MockchannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockchannel) EXPECT() *MockchannelMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockchannel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockchannelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockchannel)(nil).Close))
}

// PublishWithContext mocks base method.
func (m *Mockchannel) PublishWithContext(arg0 context.Context, exchange, key string, mandatory, immediate bool, msg amqp091.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithContext", arg0, exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockchannelMockRecorder) PublishWithContext(arg0, exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*Mockchannel)(nil).PublishWithContext), arg0, exchange, key, mandatory, immediate, msg)
}
