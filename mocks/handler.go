// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "webserver/internal/model"
	rabbit "webserver/internal/model/rabbit"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockspaceService is a mock of spaceService interface.
type MockspaceService struct {
	ctrl     *gomock.Controller
	recorder *MockspaceServiceMockRecorder
}

// MockspaceServiceMockRecorder is the mock recorder for MockspaceService.
type MockspaceServiceMockRecorder struct {
	mock *MockspaceService
}

// NewMockspaceService creates a new mock instance.
func NewMockspaceService(ctrl *gomock.Controller) *MockspaceService {
	mock := &MockspaceService{ctrl: ctrl}
	mock.recorder = &MockspaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspaceService) EXPECT() *MockspaceServiceMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockspaceService) CreateNote(ctx context.Context, note rabbit.CreateNoteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockspaceServiceMockRecorder) CreateNote(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockspaceService)(nil).CreateNote), ctx, note)
}

// CreateSpace mocks base method.
func (m *MockspaceService) CreateSpace(ctx context.Context, req rabbit.CreateSpaceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpace indicates an expected call of CreateSpace.
func (mr *MockspaceServiceMockRecorder) CreateSpace(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*MockspaceService)(nil).CreateSpace), ctx, req)
}

// DeleteAllNotes mocks base method.
func (m *MockspaceService) DeleteAllNotes(ctx context.Context, req rabbit.DeleteAllNotesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotes", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllNotes indicates an expected call of DeleteAllNotes.
func (mr *MockspaceServiceMockRecorder) DeleteAllNotes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotes", reflect.TypeOf((*MockspaceService)(nil).DeleteAllNotes), ctx, req)
}

// DeleteNote mocks base method.
func (m *MockspaceService) DeleteNote(ctx context.Context, req rabbit.DeleteNoteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockspaceServiceMockRecorder) DeleteNote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockspaceService)(nil).DeleteNote), ctx, req)
}

// GetAllNotesBySpaceID mocks base method.
func (m *MockspaceService) GetAllNotesBySpaceID(ctx context.Context, spaceID uuid.UUID) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesBySpaceID", ctx, spaceID)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesBySpaceID indicates an expected call of GetAllNotesBySpaceID.
func (mr *MockspaceServiceMockRecorder) GetAllNotesBySpaceID(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesBySpaceID", reflect.TypeOf((*MockspaceService)(nil).GetAllNotesBySpaceID), ctx, spaceID)
}

// GetAllNotesBySpaceIDFull mocks base method.
func (m *MockspaceService) GetAllNotesBySpaceIDFull(ctx context.Context, spaceID uuid.UUID) ([]model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesBySpaceIDFull", ctx, spaceID)
	ret0, _ := ret[0].([]model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesBySpaceIDFull indicates an expected call of GetAllNotesBySpaceIDFull.
func (mr *MockspaceServiceMockRecorder) GetAllNotesBySpaceIDFull(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesBySpaceIDFull", reflect.TypeOf((*MockspaceService)(nil).GetAllNotesBySpaceIDFull), ctx, spaceID)
}

// GetNoteByID mocks base method.
func (m *MockspaceService) GetNoteByID(ctx context.Context, noteID uuid.UUID) (model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", ctx, noteID)
	ret0, _ := ret[0].(model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MockspaceServiceMockRecorder) GetNoteByID(ctx, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*MockspaceService)(nil).GetNoteByID), ctx, noteID)
}

// GetNotesByType mocks base method.
func (m *MockspaceService) GetNotesByType(ctx context.Context, spaceID uuid.UUID, noteType model.NoteType) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByType", ctx, spaceID, noteType)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesByType indicates an expected call of GetNotesByType.
func (mr *MockspaceServiceMockRecorder) GetNotesByType(ctx, spaceID, noteType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByType", reflect.TypeOf((*MockspaceService)(nil).GetNotesByType), ctx, spaceID, noteType)
}

// GetNotesTypes mocks base method.
func (m *MockspaceService) GetNotesTypes(ctx context.Context, spaceID uuid.UUID) ([]model.NoteTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesTypes", ctx, spaceID)
	ret0, _ := ret[0].([]model.NoteTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesTypes indicates an expected call of GetNotesTypes.
func (mr *MockspaceServiceMockRecorder) GetNotesTypes(ctx, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesTypes", reflect.TypeOf((*MockspaceService)(nil).GetNotesTypes), ctx, spaceID)
}

// GetSpaceByID mocks base method.
func (m *MockspaceService) GetSpaceByID(ctx context.Context, id uuid.UUID) (model.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByID", ctx, id)
	ret0, _ := ret[0].(model.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByID indicates an expected call of GetSpaceByID.
func (mr *MockspaceServiceMockRecorder) GetSpaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByID", reflect.TypeOf((*MockspaceService)(nil).GetSpaceByID), ctx, id)
}

// IsUserInSpace mocks base method.
func (m *MockspaceService) IsUserInSpace(ctx context.Context, userID int64, spaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserInSpace", ctx, userID, spaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUserInSpace indicates an expected call of IsUserInSpace.
func (mr *MockspaceServiceMockRecorder) IsUserInSpace(ctx, userID, spaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserInSpace", reflect.TypeOf((*MockspaceService)(nil).IsUserInSpace), ctx, userID, spaceID)
}

// SearchNoteByText mocks base method.
func (m *MockspaceService) SearchNoteByText(ctx context.Context, req model.SearchNoteByTextRequest) ([]model.GetNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNoteByText", ctx, req)
	ret0, _ := ret[0].([]model.GetNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchNoteByText indicates an expected call of SearchNoteByText.
func (mr *MockspaceServiceMockRecorder) SearchNoteByText(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNoteByText", reflect.TypeOf((*MockspaceService)(nil).SearchNoteByText), ctx, req)
}

// UpdateNote mocks base method.
func (m *MockspaceService) UpdateNote(ctx context.Context, update rabbit.UpdateNoteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockspaceServiceMockRecorder) UpdateNote(ctx, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockspaceService)(nil).UpdateNote), ctx, update)
}

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockuserService) CheckUser(ctx context.Context, tgID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", ctx, tgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockuserServiceMockRecorder) CheckUser(ctx, tgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockuserService)(nil).CheckUser), ctx, tgID)
}

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// CheckToken mocks base method.
func (m *MockauthService) CheckToken(authHeader string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", authHeader)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockauthServiceMockRecorder) CheckToken(authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockauthService)(nil).CheckToken), authHeader)
}

// GetPayload mocks base method.
func (m *MockauthService) GetPayload(token *jwt.Token) (jwt.MapClaims, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayload", token)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPayload indicates an expected call of GetPayload.
func (mr *MockauthServiceMockRecorder) GetPayload(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockauthService)(nil).GetPayload), token)
}

// ParseToken mocks base method.
func (m *MockauthService) ParseToken(tokenString string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenString)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockauthServiceMockRecorder) ParseToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockauthService)(nil).ParseToken), tokenString)
}
