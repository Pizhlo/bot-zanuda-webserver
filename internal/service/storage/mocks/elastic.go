// Code generated by MockGen. DO NOT EDIT.
// Source: ./space.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	elastic "webserver/internal/model/elastic"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockelasticClient is a mock of elasticClient interface.
type MockelasticClient struct {
	ctrl     *gomock.Controller
	recorder *MockelasticClientMockRecorder
}

// MockelasticClientMockRecorder is the mock recorder for MockelasticClient.
type MockelasticClientMockRecorder struct {
	mock *MockelasticClient
}

// NewMockelasticClient creates a new mock instance.
func NewMockelasticClient(ctrl *gomock.Controller) *MockelasticClient {
	mock := &MockelasticClient{ctrl: ctrl}
	mock.recorder = &MockelasticClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockelasticClient) EXPECT() *MockelasticClientMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockelasticClient) Save(ctx context.Context, search elastic.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, search)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockelasticClientMockRecorder) Save(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockelasticClient)(nil).Save), ctx, search)
}

// SearchByText mocks base method.
func (m *MockelasticClient) SearchByText(ctx context.Context, search elastic.Data) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByText", ctx, search)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByText indicates an expected call of SearchByText.
func (mr *MockelasticClientMockRecorder) SearchByText(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByText", reflect.TypeOf((*MockelasticClient)(nil).SearchByText), ctx, search)
}

// UpdateNote mocks base method.
func (m *MockelasticClient) UpdateNote(ctx context.Context, search elastic.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, search)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockelasticClientMockRecorder) UpdateNote(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockelasticClient)(nil).UpdateNote), ctx, search)
}
